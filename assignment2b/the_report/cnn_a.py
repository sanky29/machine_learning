# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j_xQj09BaSVxUQuL6RB9PR5_tpbGLcWV

import all the libraries
"""

import tensorflow as tf
import pandas
import numpy as np
import keras
import matplotlib.pyplot as plt

"""load the data from drive and now store it in numpy array"""
test = pandas.read_csv(sys.argv[2],sep = ' ', header =None)
data = pandas.read_csv(sys.argv[1],sep = ' ', header = None)
test = test.values
test = test[:,:len(test[0]) - 1]
data = data.values
datay = data[:,len(data[0])-1:] 
data = data[:,:len(data[0]) -1]
data = data.reshape(len(data), 3 ,32, 32).transpose(0,2,3,1)
test = test.reshape(len(test), 3 ,32, 32).transpose(0,2,3,1)
data = data/255
test = test/255
datay = keras.utils.to_categorical(datay)
print(data.shape, test.shape)
print(datay[0])

"""convert data into x and y
start model building
"""

from numpy.random import seed
seed(1)
from tensorflow import set_random_seed
set_random_seed(2)
s = tf.Session()
input_data = keras.Input(shape=(32,32,3))
con1 = keras.layers.Conv2D(64, (3,3), strides = (1,1), activation = 'relu')(input_data)
max1 = keras.layers.MaxPooling2D((2, 2), strides=None, padding='valid')(con1)
con2 = keras.layers.Conv2D(128, (3,3), strides = (1,1), activation = 'relu')(max1)
max2 = keras.layers.MaxPooling2D((2, 2), strides=None, padding='valid')(con2)
layer0 = keras.layers.Flatten()(max2)
layer1 = keras.layers.Dense(512, activation = 'relu')(layer0)
layer2 = keras.layers.Dense(128, activation = 'relu')(layer1)
out0 = keras.layers.BatchNormalization(axis = -1)(layer2)
out = keras.layers.Dense(10, activation='softmax')(out0)
model = keras.models.Model(inputs=input_data, outputs=out)
o = keras.optimizers.Adam(lr=0.001)
model.compile(loss = 'categorical_crossentropy', optimizer = o)
history = model.fit(data, datay, epochs=60, batch_size=2000)
ans = np.zeros((len(test),1))
t = model.predict(test)
for i in range(0,len(test)):
  ans[i] = np.argmax(t[i], axis = 0)
np.savetxt(sys.argv[3], ans, delimiter = '\n')
f = plt.figure()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
print("done!!")



"""# New Section"""